name: Process URL

on:
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string
      toreaddir:
        description: 'Directory where articles to read are stored'
        required: false
        type: string
        default: links
      model:
        description: 'OpenAI model to use for summarization'
        required: false
        type: string
        default: gpt-3.5-turbo

permissions:
  issues: read
  pull-requests: write
  contents: write

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Get Issue Data
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.inputs.issue_number }}
            });
            core.setOutput('body', issue.data.body);

      - name: Extract URL
        id: extract_url
        run: |
          # Extract the first URL line and clean it up
          URL=$(echo "${{ steps.issue.outputs.body }}" | grep -m 1 '^URL:' | sed 's/^URL: //' | tr -d '\r')
          if [ -z "$URL" ]; then
            echo "Error: No URL found in the issue body"
            exit 1
          fi
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Process URL
        id: process_url
        run: |
          OUTPUT=$(uv run --script scripts/links/url_processor.py "${{ steps.extract_url.outputs.url }}" "${{ github.event.inputs.toreaddir }}" "${{ github.event.inputs.model }}")
          echo "$OUTPUT" | while IFS=: read -r key value; do
            if [ -n "$key" ] && [ -n "$value" ]; then
              echo "${key}=${value}" >> $GITHUB_OUTPUT
            fi
          done
        env:
          PYTHONUNBUFFERED: 1
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure git
        if: steps.process_url.outputs.existing_file == ''
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

      - name: Create branch
        if: steps.process_url.outputs.existing_file == ''
        run: |
          URL_HASH=$(echo "${{ steps.extract_url.outputs.url }}" | sha256sum | cut -c1-8)
          TIMESTAMP=$(date +%s)
          BRANCH_NAME="links-${TIMESTAMP}-${URL_HASH}"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
        id: create_branch

      - name: Commit changes
        if: steps.process_url.outputs.existing_file == ''
        run: |
          git add "${{ github.event.inputs.toreaddir }}/${{ steps.process_url.outputs.filename }}"
          git commit -m "Add new link: ${{ steps.process_url.outputs.title }}"

      - name: Push branch
        if: steps.process_url.outputs.existing_file == ''
        run: |
          git push origin ${{ steps.create_branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.process_url.outputs.existing_file == ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Add new link: ${{ steps.process_url.outputs.title }}`,
              body: `This PR adds a new link to the ${{ github.event.inputs.toreaddir }} directory.\n\nCloses #${{ github.event.inputs.issue_number }}`,
              head: '${{ steps.create_branch.outputs.branch_name }}',
              base: 'main'
            });

      - name: Cleanup on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.inputs.issue_number }},
                body: `The workflow failed while processing this URL. Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) and try again.`
              });
            } catch (error) {
              console.log('Failed to update issue status:', error);
            } 