name: Receive URL

on:
  workflow_dispatch:
    inputs:
      url:
        description: 'URL to process'
        required: true
        type: string
      source:
        description: 'Source of the URL (e.g., slack)'
        required: true
        type: string

permissions:
  issues: write
  actions: write

jobs:
  create_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Clean URL
        id: clean_url
        run: |
          python3 -c "import urllib.parse; url = '${{ github.event.inputs.url }}'; parsed = urllib.parse.urlparse(url); print(urllib.parse.urlunparse(('https' if parsed.scheme in ['http', 'https'] else parsed.scheme, parsed.netloc, parsed.path, '', '', '')))" > cleaned_url.txt
          echo "cleaned_url=$(cat cleaned_url.txt)" >> $GITHUB_OUTPUT

      - name: Check for Existing URL
        id: check_duplicate
        uses: actions/github-script@v7
        with:
          script: |
            const currentUrl = "${{ steps.clean_url.outputs.cleaned_url }}";
            
            // Search for issues with the same URL
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // Last 30 days
            });
            
            const duplicateIssue = issues.data.find(issue => {
              const urlMatch = issue.body.match(/URL: (.*)/);
              return urlMatch && urlMatch[1] === currentUrl;
            });
            
            if (duplicateIssue) {
              console.log(`Found duplicate URL in issue #${duplicateIssue.number}`);
              return true;
            }
            return false;

      - name: Create Issue for URL
        if: steps.check_duplicate.outputs.result != 'true'
        id: create_issue
        uses: actions/github-script@v7
        with:
          script: |
            const cleanedUrl = "${{ steps.clean_url.outputs.cleaned_url }}";
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Process URL: ${context.payload.inputs.url}`,
              body: `URL: ${cleanedUrl}\nSource: ${context.payload.inputs.source}\n\nCreated at: ${new Date().toISOString()}`,
              labels: ['archive']
            });
            console.log(`Created issue #${issue.data.number}`);
            return issue.data.number;

      - name: Trigger Process URL Workflow
        if: steps.check_duplicate.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'process-url-to-pr.yml',
              ref: 'main',
              inputs: {
                issue_number: "${{ steps.create_issue.outputs.result }}"
              }
            }); 