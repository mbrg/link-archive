name: Create Weblog Entry

on:
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to create weblog for'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  create-weblog:
    if: github.event_name == 'workflow_dispatch' || (github.event.review.state == 'approved' && contains(github.event.pull_request.labels.*.name, 'ready-to-comment'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Get PR Files and Comments
        id: get_pr_data
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || parseInt('${{ github.event.inputs.pr_number }}');
            console.log(`Processing PR number: ${prNumber}`);
            
            // Get PR files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            console.log('Files in PR:', files.data.map(f => f.filename));
            
            const archiveFile = files.data.find(file => 
              file.filename.startsWith('archive/') && 
              file.filename.endsWith('.md')
            );
            
            if (!archiveFile) {
              throw new Error(`No archive file found in PR. Found files: ${files.data.map(f => f.filename).join(', ')}`);
            }
            
            // Get ALL review comments from ALL reviews (this includes historical reviews)
            const reviewComments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: 100 // Ensure we get all comments
            });
            
            // Get general PR comments
            const prComments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100 // Ensure we get all comments
            });
            
            // Get ALL PR reviews (this includes all historical reviews)
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              per_page: 100 // Ensure we get all reviews
            });
            
            const commentsData = {
              review_comments: reviewComments.data,
              comments: prComments.data,
              reviews: reviews.data
            };
            
            core.setOutput('archive_file', archiveFile.filename);
            core.setOutput('comments_json', JSON.stringify(commentsData));

      - name: Get PR Branch Info
        id: pr_info
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || parseInt('${{ github.event.inputs.pr_number }}');
            
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });
            
            core.setOutput('branch_ref', pr.data.head.ref);

      - name: Configure git
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

      - name: Checkout PR branch
        run: |
          git fetch origin ${{ steps.pr_info.outputs.branch_ref }}
          git checkout ${{ steps.pr_info.outputs.branch_ref }}
          git fetch origin main
          git rebase origin/main

      - name: Write Comments JSON
        run: |
          cat > comments.json << 'EOFJSON'
          ${{ steps.get_pr_data.outputs.comments_json }}
          EOFJSON
      
      - name: Validate JSON file
        run: |
          if [ ! -f comments.json ] || [ ! -s comments.json ]; then
            echo "Error: comments.json file is missing or empty"
            exit 1
          fi
      
      - name: Create Weblog Entry
        id: create_weblog
        run: |
          OUTPUT=$(uv run --script src/processors/weblog_processor.py "${{ steps.get_pr_data.outputs.archive_file }}" comments.json)
          if [ $? -ne 0 ]; then
            echo "Error creating weblog entry"
            exit 1
          fi
          echo "$OUTPUT" | while IFS=: read -r key value; do
            if [ -n "$key" ] && [ -n "$value" ]; then
              echo "${key}=${value}" >> $GITHUB_OUTPUT
            fi
          done
        env:
          PYTHONUNBUFFERED: 1

      - name: Add weblog to PR
        run: |
          git add "${{ steps.create_weblog.outputs.weblog_file }}"
          
          # Check if there are changes to commit after adding
          if git diff --staged --quiet; then
            echo "No changes to commit - weblog already up to date"
            exit 0
          fi
          
          # Try to commit, if it fails due to "nothing to commit", that's fine
          if git commit -m "Add weblog entry: ${{ steps.create_weblog.outputs.title }}"; then
            # Pull any remote changes and push
            git pull origin ${{ steps.pr_info.outputs.branch_ref }} --rebase || true
            git push origin ${{ steps.pr_info.outputs.branch_ref }}
          else
            echo "Nothing to commit or commit failed"
          fi

      - name: Validate weblog entries
        run: |
          uv run --script src/processors/weblog_validator.py weblog

      - name: Merge Archive PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || parseInt('${{ github.event.inputs.pr_number }}');
            const weblogFile = "${{ steps.create_weblog.outputs.weblog_file }}";
            
            // Wait for GitHub to process merge status - retry with exponential backoff
            let retries = 0;
            const maxRetries = 2;
            let merged = false;
            
            while (retries < maxRetries) {
              try {
                // Check if PR is actually mergeable
                const pr = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber
                });
                
                if (pr.data.mergeable === false) {
                  console.log(`PR not mergeable yet, attempt ${retries + 1}/${maxRetries}`);
                  retries++;
                  await new Promise(resolve => setTimeout(resolve, 2000 * retries)); // 2s, 4s
                  continue;
                }
                
                // Try to merge
                await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: prNumber,
                  merge_method: 'squash',
                  commit_title: `Add archive + weblog: ${{ steps.create_weblog.outputs.title }}`,
                  commit_message: `Archive with weblog entry at ${{ steps.create_weblog.outputs.weblog_file }}`
                });
                
                console.log('PR merged successfully');
                merged = true;
                break;
                
              } catch (error) {
                if (error.status === 405 && retries < maxRetries - 1) {
                  console.log(`Merge failed (not mergeable), retrying in ${2 * (retries + 1)}s...`);
                  retries++;
                  await new Promise(resolve => setTimeout(resolve, 2000 * retries));
                } else {
                  console.log(`Final merge attempt failed: ${error.message}`);
                  // Post failure comment
                  const failureBody = "❌ **Weblog entry created but merge failed!**\n\n" +
                    "Your review comments have been processed and a weblog entry has been created at `" + weblogFile + "`.\n\n" +
                    "However, the PR could not be merged automatically. Error: " + error.message + "\n\n" +
                    "Please merge manually when ready.";
                  
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: prNumber,
                    body: failureBody
                  });
                  throw error;
                }
              }
            }
            
            // Only post success comment if merge actually succeeded
            if (merged) {
              const successBody = "✅ **Weblog entry created!**\n\n" +
                "Your review comments have been processed and a weblog entry has been created at `" + weblogFile + "`.\n\n" +
                "The archive PR has been successfully merged.";
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: successBody
              });
            }

      - name: Post Error Comment
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request?.number || parseInt('${{ github.event.inputs.pr_number }}');
            
            const errorBody = "❌ **Weblog creation failed!**\n\n" +
              "An error occurred while processing your review comments.\n\n" +
              "Please check the [workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.";
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: errorBody
            });
