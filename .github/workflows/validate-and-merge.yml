name: Validate and Merge

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to validate and merge'
        required: true
        type: string
      pr_number:
        description: 'PR number to merge'
        required: true
        type: string

permissions:
  contents: read
  pull-requests: write
  checks: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Validate files
        run: uv run --script scripts/links/frontmatter_validator.py links

  merge:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Merge PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ github.event.inputs.pr_number }};
            
            // Get PR status
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Check if all checks have passed
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.data.head.sha
            });

            const allChecksPassed = checks.data.check_runs.every(check => check.conclusion === 'success');
            
            if (!allChecksPassed) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: 'Cannot merge PR: Not all checks have passed. Closing PR.'
              });
              
              // Close the PR
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                state: 'closed'
              });
              return;
            }

            // Merge the PR
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: 'squash'
            }); 