name: Process URL

on:
  issues:
    types: [opened, labeled]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process'
        required: true
        type: string
      pr_number:
        description: 'PR number to update (if updating existing PR)'
        required: false
        type: string
      toreaddir:
        description: 'Directory where articles to read are stored'
        required: false
        type: string
        default: links
      model:
        description: 'OpenAI model to use for summarization'
        required: false
        type: string
        default: gpt-3.5-turbo

jobs:
  process:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Get Issue Data
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number || github.event.inputs.issue_number }}
            });
            return issue.data;

      - name: Extract URL
        id: extract_url
        run: |
          URL=$(echo "${{ steps.issue.outputs.body }}" | grep -o 'URL: .*' | cut -d' ' -f2)
          echo "url=$URL" >> $GITHUB_OUTPUT

      - name: Check for Existing URL
        id: check_duplicate
        uses: actions/github-script@v7
        with:
          script: |
            const currentUrl = "${{ steps.extract_url.outputs.url }}";
            const currentIssueNumber = ${{ github.event.issue.number || github.event.inputs.issue_number }};
            
            // Search for issues with the same URL
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // Last 30 days
            });
            
            const duplicateIssue = issues.data.find(issue => {
              if (issue.number === currentIssueNumber) return false;
              const urlMatch = issue.body.match(/URL: (.*)/);
              return urlMatch && urlMatch[1] === currentUrl;
            });
            
            if (duplicateIssue) {
              console.log(`Found duplicate URL in issue #${duplicateIssue.number}`);
              return true;
            }
            return false;

      - name: Mark as Duplicate
        if: steps.check_duplicate.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number || github.event.inputs.issue_number }},
              labels: ['duplicate'],
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number || github.event.inputs.issue_number }},
              body: 'This URL has already been processed in issue #${duplicateIssue.number}.'
            });

      - name: Process URL
        if: steps.check_duplicate.outputs.result != 'true'
        id: process_url
        run: |
          uv run --script scripts/process_url_workflow/url_processor.py "${{ steps.extract_url.outputs.url }}" "${{ github.event.inputs.toreaddir }}" "${{ github.event.inputs.model }}"
        env:
          PYTHONUNBUFFERED: 1
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Configure git
        if: steps.process_url.outputs.existing_file == ''
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'

      - name: Create branch
        if: steps.process_url.outputs.existing_file == ''
        run: |
          BRANCH_NAME="url-process-$(date +%s)"
          git checkout -b $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.process_url.outputs.existing_file == ''
        run: |
          git add "${{ github.event.inputs.toreaddir }}/${{ steps.process_url.outputs.filename }}"
          git commit -m "Add new link: ${{ steps.process_url.outputs.title }}"

      - name: Validate new files
        if: steps.process_url.outputs.existing_file == ''
        run: uv run --script scripts/process_url_workflow/frontmatter_validator.py "${{ github.event.inputs.toreaddir }}"
      
      - name: Push branch
        if: steps.process_url.outputs.existing_file == ''
        run: |
          git push origin ${{ steps.create_branch.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.process_url.outputs.existing_file == ''
        uses: actions/github-script@v7
        with:
          script: |
            if ("${{ github.event.inputs.pr_number }}" !== "") {
              // Update existing PR
              const pr = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.inputs.pr_number }}
              });
              
              // Update PR title and body
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: ${{ github.event.inputs.pr_number }},
                title: `Add new link: ${{ steps.process_url.outputs.title }}`,
                body: `This PR adds a new link to the ${{ github.event.inputs.toreaddir }} directory.\n\nCloses #${{ github.event.issue.number || github.event.inputs.issue_number }}`
              });
              
              // Add comment to issue about PR update
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.issue.number || github.event.inputs.issue_number }},
                body: `PR #${{ github.event.inputs.pr_number }} has been updated with the latest changes.`
              });
            } else {
              // Create new PR
              const pr = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Add new link: ${{ steps.process_url.outputs.title }}`,
                body: `This PR adds a new link to the ${{ github.event.inputs.toreaddir }} directory.\n\nCloses #${{ github.event.issue.number || github.event.inputs.issue_number }}`,
                head: ${{ steps.create_branch.outputs.branch_name }},
                base: 'main'
              });
              
              // Add comment to issue about PR creation
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.issue.number || github.event.inputs.issue_number }},
                body: `PR #${pr.data.number} created for this URL. The issue will be automatically closed when the PR is merged.`
              });
            }

      - name: Cleanup on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: ${{ github.event.issue.number || github.event.inputs.issue_number }},
                body: `The workflow failed while processing this URL. Please check the [workflow logs](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) and try again.`
              });
            } catch (error) {
              console.log('Failed to update issue status:', error);
            } 