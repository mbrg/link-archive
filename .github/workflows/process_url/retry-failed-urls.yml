name: Retry Failed URLs

on:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  workflow_dispatch:

jobs:
  retry:
    runs-on: ubuntu-latest
    steps:
      - name: Get Issues Needing Processing
        id: get_issues
        uses: actions/github-script@v7
        with:
          script: |
            // Get all open issues
            const openIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString() // Last 24 hours
            });
            
            // Get all closed issues from last 24 hours
            const closedIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
            });
            
            // Get all PRs
            const allPRs = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString()
            });
            
            // Check which issues need processing
            const issuesToProcess = await Promise.all([...openIssues.data, ...closedIssues.data].map(async (issue) => {
              // Find PRs that reference this issue
              const relatedPRs = allPRs.data.filter(pr => 
                pr.body.includes(`Closes #${issue.number}`)
              );
              
              if (relatedPRs.length === 0) {
                // No PR exists - needs processing
                return { issue, action: 'create' };
              }
              
              // Check PR status
              const pr = relatedPRs[0];
              if (pr.state === 'closed' && !pr.merged) {
                // PR was closed without merging - needs new PR
                return { issue, action: 'create' };
              }
              
              if (pr.state === 'open') {
                // PR exists but might need updating
                const prDetails = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });
                
                // Check if PR branch exists
                try {
                  await github.rest.repos.getBranch({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    branch: pr.head.ref
                  });
                  // Branch exists - update existing PR
                  return { issue, action: 'update', prNumber: pr.number };
                } catch (error) {
                  // Branch doesn't exist - create new PR
                  return { issue, action: 'create' };
                }
              }
              
              // PR is merged or in a good state - no action needed
              return null;
            }));
            
            return issuesToProcess.filter(Boolean);

      - name: Process Issues
        if: steps.get_issues.outputs.length > 0
        run: |
          for item in ${{ steps.get_issues.outputs }}; do
            if [[ "$(echo $item | jq -r '.action')" == "create" ]]; then
              # Create new PR
              gh workflow run process-url.yml --ref main -f issue_number=$(echo $item | jq -r '.issue.number')
            elif [[ "$(echo $item | jq -r '.action')" == "update" ]]; then
              # Update existing PR
              gh workflow run process-url.yml --ref main -f issue_number=$(echo $item | jq -r '.issue.number') -f pr_number=$(echo $item | jq -r '.prNumber')
            fi
          done 